---
import { supabase } from '../lib/supabase';
import type { Task } from '../types/task';

const { data: tasks, error } = await supabase
  .from('tasks')
  .select('*')
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching tasks:', error);
}
---

<div class="space-y-4">
  {tasks?.map((task: Task) => (
    <div class="bg-white rounded-lg shadow-md p-6 transition hover:shadow-lg">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <h3 class:list={[
            "text-xl font-semibold mb-2",
            task.is_completed && "line-through text-gray-500"
          ]}>
            {task.title}
          </h3>
          <p class:list={[
            "text-gray-600",
            task.is_completed && "line-through text-gray-400"
          ]}>
            {task.description}
          </p>
          <p class="text-sm text-gray-400 mt-2">
            {new Date(task.created_at).toLocaleDateString()}
          </p>
        </div>
        <div class="flex space-x-2">
          <button
            data-task-id={task.id}
            class:list={[
              "toggle-task p-2 rounded-full transition",
              task.is_completed ? "text-green-500 hover:text-green-600" : "text-gray-400 hover:text-gray-500"
            ]}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              {task.is_completed 
                ? <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline>
                : <circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>
              }
            </svg>
          </button>
          <button
            data-task-id={task.id}
            class="delete-task p-2 text-red-400 hover:text-red-500 rounded-full transition"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="3 6 5 6 21 6"></polyline>
              <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  ))}
</div>

<script>
  import { supabase } from '../lib/supabase';

  const handleDelete = async (taskId: string) => {
    const { error } = await supabase
      .from('tasks')
      .delete()
      .eq('id', taskId);

    if (error) {
      console.error('Error deleting task:', error);
      return;
    }

    window.location.reload();
  };

  const handleToggle = async (taskId: string) => {
    const { data: task, error: fetchError } = await supabase
      .from('tasks')
      .select('is_completed')
      .eq('id', taskId)
      .single();

    if (fetchError) {
      console.error('Error fetching task:', fetchError);
      return;
    }

    const { error: updateError } = await supabase
      .from('tasks')
      .update({ is_completed: !task.is_completed })
      .eq('id', taskId);

    if (updateError) {
      console.error('Error updating task:', updateError);
      return;
    }

    window.location.reload();
  };

  document.querySelectorAll('.delete-task').forEach((button) => {
    button.addEventListener('click', (e) => {
      const taskId = (e.currentTarget as HTMLButtonElement).dataset.taskId;
      if (taskId) handleDelete(taskId);
    });
  });

  document.querySelectorAll('.toggle-task').forEach((button) => {
    button.addEventListener('click', (e) => {
      const taskId = (e.currentTarget as HTMLButtonElement).dataset.taskId;
      if (taskId) handleToggle(taskId);
    });
  });
</script>